
MotorBesturing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b5  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initMotorPWM>:
#include <util/delay.h>
#include "rp6aansluitingen.h"

void initMotorPWM(){
	//
	TCCR1A |= ( 1 << COM1A1 )  | ( 1 << COM1B1) | ( 1 << WGM10);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	81 6a       	ori	r24, 0xA1	; 161
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (  1 << CS10);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	81 60       	ori	r24, 0x01	; 1
  76:	8e bd       	out	0x2e, r24	; 46
  78:	08 95       	ret

0000007a <driveFoward>:
	
	//OCR1A = 6000;
	//OCR1B = 6000;
}
void driveFoward(){
	PORTC |= DIR_L |  DIR_R; 
  7a:	85 b3       	in	r24, 0x15	; 21
  7c:	8c 60       	ori	r24, 0x0C	; 12
  7e:	85 bb       	out	0x15, r24	; 21
	PORTD |= MOTOR_L  | MOTOR_R ;
  80:	82 b3       	in	r24, 0x12	; 18
  82:	80 63       	ori	r24, 0x30	; 48
  84:	82 bb       	out	0x12, r24	; 18
  86:	08 95       	ret

00000088 <driveBackward>:
}

void driveBackward(){
	PORTC &= ~ DIR_L; 
  88:	aa 98       	cbi	0x15, 2	; 21
	PORTC &= ~ DIR_R;
  8a:	ab 98       	cbi	0x15, 3	; 21
	PORTD |= MOTOR_L  | MOTOR_R ; 
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	80 63       	ori	r24, 0x30	; 48
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <stopMotor>:
}
void stopMotor(){
	PORTD &= ~  MOTOR_L ;
  94:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~  MOTOR_R ;
  96:	95 98       	cbi	0x12, 5	; 18
  98:	08 95       	ret

0000009a <main>:
}

int main(){
    DDRD |= MOTOR_R |  MOTOR_L; 
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 63       	ori	r24, 0x30	; 48
  9e:	81 bb       	out	0x11, r24	; 17
	DDRC |= DIR_L |  DIR_R;
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	8c 60       	ori	r24, 0x0C	; 12
  a4:	84 bb       	out	0x14, r24	; 20
	initMotorPWM();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <initMotorPWM>

	for(int i=0;i<100;i=i+5) {
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = i;
  ae:	db bd       	out	0x2b, r29	; 43
  b0:	ca bd       	out	0x2a, r28	; 42
		OCR1B = i;
  b2:	d9 bd       	out	0x29, r29	; 41
  b4:	c8 bd       	out	0x28, r28	; 40
		driveFoward(); 
  b6:	0e 94 3d 00 	call	0x7a	; 0x7a <driveFoward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x26>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x30>
  ca:	00 00       	nop
int main(){
    DDRD |= MOTOR_R |  MOTOR_L; 
	DDRC |= DIR_L |  DIR_R;
	initMotorPWM();

	for(int i=0;i<100;i=i+5) {
  cc:	25 96       	adiw	r28, 0x05	; 5
  ce:	c4 36       	cpi	r28, 0x64	; 100
  d0:	d1 05       	cpc	r29, r1
  d2:	69 f7       	brne	.-38     	; 0xae <main+0x14>
    while (1) 
    {
		  
		 
		 
		driveFoward(); 
  d4:	0e 94 3d 00 	call	0x7a	; 0x7a <driveFoward>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x44>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x4e>
  e8:	00 00       	nop
		_delay_ms(200);
		stopMotor();
  ea:	0e 94 4a 00 	call	0x94	; 0x94 <stopMotor>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x5a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x64>
  fe:	00 00       	nop
		_delay_ms(1000);
		driveBackward();
 100:	0e 94 44 00 	call	0x88	; 0x88 <driveBackward>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x70>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x7a>
 114:	00 00       	nop
		_delay_ms(200);
		stopMotor();
 116:	0e 94 4a 00 	call	0x94	; 0x94 <stopMotor>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 e6       	ldi	r24, 0x69	; 105
 11e:	98 e1       	ldi	r25, 0x18	; 24
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x86>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x90>
 12a:	00 00       	nop
 12c:	d3 cf       	rjmp	.-90     	; 0xd4 <main+0x3a>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
